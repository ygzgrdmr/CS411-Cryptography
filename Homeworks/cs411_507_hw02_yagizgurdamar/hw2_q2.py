
import requests
import math
import random

API_URL = 'http://harpoon1.sabanciuniv.edu:9999/'

# Change your id here
my_id = 22534


def getQ2():
  endpoint = '{}/{}/{}'.format(API_URL, "Q2", my_id )
  response = requests.get(endpoint)
  if response.ok:
    res = response.json()
    e, cipher = res['e'], res['cipher']
    return e, cipher
  else:  print(response.json())

def checkQ2(ptext):  #check your answer for Question 2
  response = requests.put('{}/{}'.format(API_URL, "checkQ2"), json = {"ID": my_id, "msg":ptext})
  print(response.json())

def phi(n):

  amount = 0
  for k in range(1, n + 1):
    if math.gcd(n, k) == 1:
      amount += 1
  return amount

def gcd(a, b):
  while b:
    a, b = b, a % b
  return a

def egcd(a, b):
  x, y, u, v = 0, 1, 1, 0
  while a != 0:
    q, r = b // a, b % a
    m, n = x - u * q, y - v * q
    b, a, x, y, u, v = a, r, u, v, m, n
  gcd = b
  return gcd, x, y


def modinv(a, m):
  gcd, x, y = egcd(a, m)
  if gcd != 1:
    return None  # modular inverse does not exist
  else:
    return x % m


print(getQ2())

p = 163812632438116402334651955238877888051471698595800699322979615035703105353498598900017754479082745390305183480326386193928762023006697325502630355995540302095536983747674239699082775937971908945314983176639634719523082664655125286220339981282043117576435108592265744474672826334454420325847233209118053745479
q = 167991311406281829893277907517380926743297770437237817698088843729837413680407121035993724942424328049100226903066919418963576739130754375674323262394889417412537943169688299724092631996519692955388293697048331540030669504591419100438660952486903606581569836090930608369486871356825028654569386086674053846173

n=q*p

e=1708412553814754635737185835949486693935358575894652910661708977098433002654754944129620488772200284507843815971294961499238916140271704571685301138276170227991705788887262649053743518821772498070154478062814992932752778997589409087953034103474677309575945194861526338697584484978831514633417944730367449276136744075745699717546439015050290053473652093390740204526935670645440680221886990472232079230868136116686581140659175062248731519806134356659281095426141370615477017289524656529838192186905121779014247757989549255979972958104779814194461705091147310901575651816954605731675940936393151927398031508266429234863
c=15700512006592706305963801796216632184414552273371850203055032054004600595902630763712104265374119686277766922414988314092963208949595732216704848695326252990485201495470062759812142255217548640709933773322621719404192120527079929987499669057664352149111049581601661002389099327328317165676393260208761086747962093830767933159630740804801409681816320759791124425669132664132454876657592792817616399786532175092261920779755221876402056739692200276756858223859308360170028159627692163355596696025792651253799659972699424613178125488479510786531238889672788196362955688029115388552032391216525850909675955437404234407040
phi_n = (p - 1) * (q - 1)

d = pow(e, -1, phi_n)

# Computing m
m = pow(c, d, n)

# Decoding m into a Unicode string
decoded_message = bytes.fromhex(hex(m)[2:]).decode('utf-8')
checkQ2(decoded_message)
